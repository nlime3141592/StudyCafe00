package deu.java002_02.server;

import java.net.Socket;

import deu.java002_02.ni.INetworkModule;
import deu.java002_02.ni.StandardNetworkService;

public abstract class ClientThread implements Runnable
{
	private StandardNetworkService m_netService;

	private boolean m_started;
	private Thread m_thread;

	public ClientThread(Socket _socket)
	{
		m_netService = new StandardNetworkService(_socket);

		m_started = false;
		m_thread = new Thread(this);
	}

	protected abstract void onService(String _header, INetworkModule _netService);

	@Override
	public final void run()
	{
		while(this.getThreadState() == ThreadState.RUNNING)
		{
			String header = m_netService.readLine();

			if(header == null)
				break;

			this.onService(header, m_netService);
		}
	}

	public void start()
	{
		if(!m_started)
		{
			m_started = true;
			m_thread.start();
		}
	}

	public void stop()
	{
		if(m_started && m_thread != null)
		{
			m_netService.stop();
			m_thread = null;
			System.out.println("클라이언트 서비스를 종료합니다.");
		}
	}

	public final ThreadState getThreadState()
	{
		if(!m_started)
			return ThreadState.READY;
		else if(m_thread != null)
			return ThreadState.RUNNING;
		else
			return ThreadState.END;
	}
}
